/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define MEH LC(LS(LALT))
#define HYPER LS(LC(LG(LALT)))
#define SHFT LSHFT
#define CTRL LCTRL

#define CART CARET

#define L_BASE 0
#define L_NUM 1
#define L_FUNC 2
#define L_NAV  3
#define L_EXTS 4
#define L_MACR 5

&sl {
    release-after-ms = <2000>;
};

&key_repeat {
    usage-pages = <HID_USAGE_KEY HID_USAGE_CONSUMER>;
};

&lt {
    flavor = "hold-preferred";
};

/ {
    macros {
        i_email: insert_email {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            bindings = <&kp S &kp A &kp H &kp A &kp N &kp A &kp T &kp A &kp N &kp K &kp A &kp L &kp A &kp AT &kp G &kp M &kp A &kp I &kp L &kp DOT &kp C &kp O &kp M>;
        };

        i_qqh: insert_quackquackhonk {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            bindings = <&kp Q &kp U &kp A &kp C &kp K &kp Q &kp U &kp A &kp C &kp K &kp H &kp O &kp N &kp K>;
            label = "I_GITHUB";
        };
    };
    behaviors {
        // Shift + Backspace for Delete (mod-morph)
        bksp_del: bksp_del {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;
            mods = <(MOD_LSFT)>;
        };
        // Shift + Space = Underscore
        sp_und: space_underscore {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp SPACE>, <&kp UNDERSCORE>;
            mods = <(MOD_LSFT)>;
            keep-mods = <(MOD_LSFT)>;
        };
        // homerow mods
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <100>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
&kp TAB       &kp Q         &kp W         &kp F         &kp P          &kp B          &kp J       &kp L          &kp U         &kp Y         &kp SEMI      &bksp_del
&kp ESC       &kp A         &hm LGUI R    &hm LALT S    &hm CTRL T     &kp G          &kp M       &hm CTRL N     &hm LALT E    &hm LGUI I    &kp O         &kp SINGLE_QUOTE
&kp LPAR      &kp X         &kp C         &kp D         &kp V          &kp Z          &kp K       &kp H          &kp COMMA     &kp DOT       &kp SLASH     &kp RPAR
&sl L_EXTS    &kp LCTRL     &kp LALT      &kp LGUI      &lt L_NUM LBKT &mt SHFT ENTER &sp_und     &lt L_NAV RBKT &kp MEH       &kp HYPER     &kp RCTRL     &sl L_MACR
            >;
        };


        NUM {
            bindings = <
&kp GRAVE     &kp EXCL      &kp AT        &kp HASH      &kp DOLLAR    &trans        &trans        &kp N1        &kp N2        &kp N3        &kp EQUAL     &trans
&kp TILDE     &kp PRCNT     &hm LGUI CART &hm LALT AMPS &hm CTRL BSLH &kp PIPE      &kp MINUS     &hm CTRL N4   &hm LALT N5   &hm LGUI N6   &kp PLUS      &trans
&trans        &trans        &trans        &trans        &trans        &trans        &trans        &kp N7        &kp N8        &kp N9        &kp STAR      &trans
&trans        &trans        &trans        &trans        &trans        &trans        &trans        &kp N0        &trans        &trans        &trans        &trans
            >;
        };

        NAV {
            bindings = <
&trans        &trans        &trans        &trans        &trans        &trans       &kp HOME       &kp PG_DN    &kp PG_UP      &kp END       &trans        &trans
&trans        &trans        &trans        &trans        &trans        &trans       &kp LEFT       &kp DOWN     &kp UP         &kp RIGHT     &kp LG(BSLH)  &trans
&trans        &trans        &trans        &trans        &trans        &trans       &trans         &kp LG(LBKT) &kp LG(RBKT)   &trans        &trans        &trans
&trans        &trans        &trans        &trans        &trans        &trans       &trans         &trans       &trans         &trans        &trans        &trans
            >;
        };

        FUNCS {
            bindings = <
&kp F13       &kp F14       &kp F14       &kp F14       &kp F14       &kp F14       &kp F14       &kp F14       &kp F14       &kp F14       &kp F14       &kp F14
&kp F1        &kp F2        &hm LGUI F3   &hm LALT F4   &hm CTRL F5   &kp F6        &kp F7        &hm CTRL F8   &hm LALT F9   &hm LGUI F10  &kp F11       &kp F12
&trans        &trans        &trans        &trans        &trans        &trans        &trans        &trans        &trans        &trans        &trans        &trans
&trans        &trans        &trans        &trans        &trans        &trans        &trans        &trans        &trans        &trans        &trans        &trans
            >;
        };

        // Media Layer
        EXTRA {
            bindings = <
&trans        &trans        &trans        &trans        &trans        &trans        &trans        &kp C_PP      &trans        &trans       &trans         &trans
&trans        &trans        &trans        &trans        &trans        &trans        &kp C_PREV    &kp C_VOL_DN  &kp C_VOL_UP  &kp C_NEXT   &trans         &trans
&trans        &trans        &trans        &trans        &trans        &trans        &trans        &kp C_MUTE    &trans        &trans       &trans         &trans
&trans        &trans        &trans        &trans        &trans        &trans        &trans        &trans        &trans        &trans       &trans         &trans
            >;
        };

        // Macro Layer
        MACROS {
            bindings = <
&trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans
&trans    &trans    &trans    &trans    &trans    &trans    &trans    &i_qqh    &i_email  &trans    &trans    &trans
&trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans
&trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans
            >;
        };
    };
};

// Example Layer
//         EXAMPLE {
//             bindings = <
// &trans        &trans        &trans        &trans        &trans        &trans       &trans         &trans       &trans         &trans        &trans        &trans
// &trans        &trans        &trans        &trans        &trans        &trans       &trans         &trans       &trans         &trans        &trans        &trans
// &trans        &trans        &trans        &trans        &trans        &trans       &trans         &trans       &trans         &trans        &trans        &trans
// &trans        &trans        &trans        &trans        &trans        &trans       &trans         &trans       &trans         &trans        &trans        &trans
//             >;
//         };
